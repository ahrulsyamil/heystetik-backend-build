import { ConfigService } from '@nestjs/config';
import { Response } from 'express';
import * as useragent from 'express-useragent';
import { ChangePasswordDto } from 'src/auth/dto/change-password.dto';
import { MailService } from 'src/mail/mail.service';
import { MediaService } from 'src/media/media.service';
import { UserEntity } from 'src/users/entities/user.entity';
import { UsersService } from 'src/users/users.service';
import { AuthService } from './auth.service';
import { AppleLoginByTokenDto } from './dto/apple-login-by-token.dto';
import { FacebookLoginByTokenDto } from './dto/facebook-login-by-token.dto';
import { ForgotPasswordDto } from './dto/forgot-password.dto';
import { GoogleLoginByTokenDto } from './dto/google-login-by-token.dto';
import { LoginUserDto } from './dto/login-user.dto';
import { ResetPasswordDto } from './dto/reset-password.dto';
import { UpdateProfileDto } from './dto/update-profile.dto';
import { UserFromTokenDto } from './dto/user-from-token.dto';
import { UserService } from './user/user.service';
export declare class AuthController {
    private authService;
    private userService;
    private usersService;
    private configService;
    private mediaService;
    private mailService;
    constructor(authService: AuthService, userService: UserService, usersService: UsersService, configService: ConfigService, mediaService: MediaService, mailService: MailService);
    login(userAgent: useragent.Details, body: LoginUserDto): Promise<{
        token: string;
        user: {
            password: any;
            id: number;
            fullname: string;
            username: string;
            email: string;
            no_phone: string;
            department: string;
            gender: string;
            address: string;
            photo_profile: string;
            referral_code: string;
            user_code: string;
            roleId: number;
            verification_code_phone: number;
            verification_code_email: number;
            provinceId: number;
            cityId: number;
            dob: Date;
            bio: string;
            finish_register: boolean;
            verified_email_at: Date;
            verified_phone_at: Date;
            verified_account_at: Date;
            education: string;
            practice_location: string;
            join_date: Date;
            title: string;
            sip: string;
            str: string;
            ktp_no: string;
            ktp_image: string;
            npwp_no: string;
            npwp_image: string;
            specialist: string;
            rating: number;
            status_schedule: string;
            since: Date;
            start: Date;
            until: Date;
            doctor_schedule_status: string;
            doctor_schedule_start_date: Date;
            doctor_schedule_end_date: Date;
            doctor_schedule_resting_time: string;
            is_active: boolean;
            created_at: Date;
            updated_at: Date;
            deleted_at: Date;
            refresh_token: string;
            role: import(".prisma/client").roles;
        };
    }>;
    loginCms(userAgent: useragent.Details, body: LoginUserDto): Promise<{
        token: string;
        user: {
            password: any;
            id: number;
            fullname: string;
            username: string;
            email: string;
            no_phone: string;
            department: string;
            gender: string;
            address: string;
            photo_profile: string;
            referral_code: string;
            user_code: string;
            roleId: number;
            verification_code_phone: number;
            verification_code_email: number;
            provinceId: number;
            cityId: number;
            dob: Date;
            bio: string;
            finish_register: boolean;
            verified_email_at: Date;
            verified_phone_at: Date;
            verified_account_at: Date;
            education: string;
            practice_location: string;
            join_date: Date;
            title: string;
            sip: string;
            str: string;
            ktp_no: string;
            ktp_image: string;
            npwp_no: string;
            npwp_image: string;
            specialist: string;
            rating: number;
            status_schedule: string;
            since: Date;
            start: Date;
            until: Date;
            doctor_schedule_status: string;
            doctor_schedule_start_date: Date;
            doctor_schedule_end_date: Date;
            doctor_schedule_resting_time: string;
            is_active: boolean;
            created_at: Date;
            updated_at: Date;
            deleted_at: Date;
            refresh_token: string;
            role: import(".prisma/client").roles;
        };
    }>;
    googleLogin(): void;
    googleRedirect(userAgent: useragent.Details, req: any, response: Response): Promise<void>;
    googleLoginByToken(body: GoogleLoginByTokenDto, response: Response): Promise<Response<any, Record<string, any>>>;
    facebookLogin(): Promise<void>;
    facebookLoginRedirect(userAgent: useragent.Details, req: any, response: Response): Promise<void>;
    facebookLoginByToken(body: FacebookLoginByTokenDto): Promise<{
        token: string;
        user: import(".prisma/client").users & {
            role: import(".prisma/client").roles;
        };
    }>;
    appleLogin(): void;
    appleLoginByToken(body: AppleLoginByTokenDto): Promise<{
        token: string;
        user: import(".prisma/client").users & {
            role: import(".prisma/client").roles;
        };
    }>;
    userFromToken(data: UserFromTokenDto): Promise<{
        token: string;
        user: UserEntity;
    }>;
    changePassword(user: UserEntity, data: ChangePasswordDto): Promise<string>;
    forgotPassword(body: ForgotPasswordDto): Promise<string>;
    resetPassword(body: ResetPasswordDto): Promise<string>;
    getSession(user: UserEntity): Promise<{
        username: string;
        media_user_profile_picture: import(".prisma/client").media_user_profile_picture & {
            media: import(".prisma/client").media;
        };
        id: number;
        email: string;
        role: import(".prisma/client").roles;
        no_phone: string;
        fullname: string;
        gender: string;
    }>;
    updateProfile(user: UserEntity, data: UpdateProfileDto): Promise<UpdateProfileDto>;
}
